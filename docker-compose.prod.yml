version: '3.8'

services:
  # 꿈결 메인 애플리케이션 (프로덕션)
  dream-tracer:
    build:
      context: .
      target: production
    container_name: dream-tracer-prod
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    env_file:
      - .env.production
    networks:
      - dream-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dream-tracer.rule=Host(`dream-tracer.vercel.app`)"
      - "traefik.http.routers.dream-tracer.tls=true"
      - "traefik.http.routers.dream-tracer.tls.certresolver=letsencrypt"

  # Redis (프로덕션 - 마스터/슬레이브 구성)
  redis-master:
    image: redis:7-alpine
    container_name: dream-tracer-redis-master
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_master_data:/data
    networks:
      - dream-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  redis-slave:
    image: redis:7-alpine
    container_name: dream-tracer-redis-slave
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis-master
    networks:
      - dream-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # PostgreSQL (프로덕션 - 백업 포함)
  postgres:
    image: postgres:15-alpine
    container_name: dream-tracer-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    networks:
      - dream-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx 로드 밸런서
  nginx:
    image: nginx:alpine
    container_name: dream-tracer-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - dream-tracer
    networks:
      - dream-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:latest
    container_name: dream-tracer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - dream-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:latest
    container_name: dream-tracer-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dream-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # 자동 백업 서비스
  backup:
    image: postgres:15-alpine
    container_name: dream-tracer-backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh
    networks:
      - dream-network
    depends_on:
      - postgres
    restart: unless-stopped
    command: ["sh", "-c", "chmod +x /backup.sh && crond -f"]

volumes:
  redis_master_data:
    driver: local
  postgres_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  dream-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16